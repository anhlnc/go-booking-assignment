// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingFlightClient is the client API for BookingFlight service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingFlightClient interface {
	CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	FindFlight(ctx context.Context, in *FindFlightRequest, opts ...grpc.CallOption) (*Flight, error)
	GetFlightID(ctx context.Context, in *GetFlightIDRequest, opts ...grpc.CallOption) (*Flight, error)
	DeleteFlight(ctx context.Context, in *DeleteFlightRequest, opts ...grpc.CallOption) (*Empty, error)
	ListFlight(ctx context.Context, in *ListFlightRequest, opts ...grpc.CallOption) (*ListFlightResponse, error)
}

type bookingFlightClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingFlightClient(cc grpc.ClientConnInterface) BookingFlightClient {
	return &bookingFlightClient{cc}
}

func (c *bookingFlightClient) CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/booking.BookingFlight/CreateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingFlightClient) UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/booking.BookingFlight/UpdateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingFlightClient) FindFlight(ctx context.Context, in *FindFlightRequest, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/booking.BookingFlight/FindFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingFlightClient) GetFlightID(ctx context.Context, in *GetFlightIDRequest, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/booking.BookingFlight/GetFlightID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingFlightClient) DeleteFlight(ctx context.Context, in *DeleteFlightRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/booking.BookingFlight/DeleteFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingFlightClient) ListFlight(ctx context.Context, in *ListFlightRequest, opts ...grpc.CallOption) (*ListFlightResponse, error) {
	out := new(ListFlightResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingFlight/ListFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingFlightServer is the server API for BookingFlight service.
// All implementations must embed UnimplementedBookingFlightServer
// for forward compatibility
type BookingFlightServer interface {
	CreateFlight(context.Context, *Flight) (*Flight, error)
	UpdateFlight(context.Context, *Flight) (*Flight, error)
	FindFlight(context.Context, *FindFlightRequest) (*Flight, error)
	GetFlightID(context.Context, *GetFlightIDRequest) (*Flight, error)
	DeleteFlight(context.Context, *DeleteFlightRequest) (*Empty, error)
	ListFlight(context.Context, *ListFlightRequest) (*ListFlightResponse, error)
	mustEmbedUnimplementedBookingFlightServer()
}

// UnimplementedBookingFlightServer must be embedded to have forward compatible implementations.
type UnimplementedBookingFlightServer struct {
}

func (UnimplementedBookingFlightServer) CreateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (UnimplementedBookingFlightServer) UpdateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (UnimplementedBookingFlightServer) FindFlight(context.Context, *FindFlightRequest) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFlight not implemented")
}
func (UnimplementedBookingFlightServer) GetFlightID(context.Context, *GetFlightIDRequest) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightID not implemented")
}
func (UnimplementedBookingFlightServer) DeleteFlight(context.Context, *DeleteFlightRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlight not implemented")
}
func (UnimplementedBookingFlightServer) ListFlight(context.Context, *ListFlightRequest) (*ListFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlight not implemented")
}
func (UnimplementedBookingFlightServer) mustEmbedUnimplementedBookingFlightServer() {}

// UnsafeBookingFlightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingFlightServer will
// result in compilation errors.
type UnsafeBookingFlightServer interface {
	mustEmbedUnimplementedBookingFlightServer()
}

func RegisterBookingFlightServer(s grpc.ServiceRegistrar, srv BookingFlightServer) {
	s.RegisterService(&BookingFlight_ServiceDesc, srv)
}

func _BookingFlight_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingFlightServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingFlight/CreateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingFlightServer).CreateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingFlight_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingFlightServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingFlight/UpdateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingFlightServer).UpdateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingFlight_FindFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingFlightServer).FindFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingFlight/FindFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingFlightServer).FindFlight(ctx, req.(*FindFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingFlight_GetFlightID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingFlightServer).GetFlightID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingFlight/GetFlightID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingFlightServer).GetFlightID(ctx, req.(*GetFlightIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingFlight_DeleteFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingFlightServer).DeleteFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingFlight/DeleteFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingFlightServer).DeleteFlight(ctx, req.(*DeleteFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingFlight_ListFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingFlightServer).ListFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingFlight/ListFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingFlightServer).ListFlight(ctx, req.(*ListFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingFlight_ServiceDesc is the grpc.ServiceDesc for BookingFlight service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingFlight_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.BookingFlight",
	HandlerType: (*BookingFlightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlight",
			Handler:    _BookingFlight_CreateFlight_Handler,
		},
		{
			MethodName: "UpdateFlight",
			Handler:    _BookingFlight_UpdateFlight_Handler,
		},
		{
			MethodName: "FindFlight",
			Handler:    _BookingFlight_FindFlight_Handler,
		},
		{
			MethodName: "GetFlightID",
			Handler:    _BookingFlight_GetFlightID_Handler,
		},
		{
			MethodName: "DeleteFlight",
			Handler:    _BookingFlight_DeleteFlight_Handler,
		},
		{
			MethodName: "ListFlight",
			Handler:    _BookingFlight_ListFlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flight.proto",
}
