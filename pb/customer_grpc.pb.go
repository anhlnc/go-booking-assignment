// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingCustomerClient is the client API for BookingCustomer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingCustomerClient interface {
	CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	UpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	FindCustomer(ctx context.Context, in *FindCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*Empty, error)
	ListCustomer(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error)
	HistoryBooking(ctx context.Context, in *HistoryBookingRequest, opts ...grpc.CallOption) (*ListBookedResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Customer, error)
}

type bookingCustomerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingCustomerClient(cc grpc.ClientConnInterface) BookingCustomerClient {
	return &bookingCustomerClient{cc}
}

func (c *bookingCustomerClient) CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/booking.BookingCustomer/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingCustomerClient) UpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/booking.BookingCustomer/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingCustomerClient) FindCustomer(ctx context.Context, in *FindCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/booking.BookingCustomer/FindCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingCustomerClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/booking.BookingCustomer/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingCustomerClient) ListCustomer(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error) {
	out := new(ListCustomerResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingCustomer/ListCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingCustomerClient) HistoryBooking(ctx context.Context, in *HistoryBookingRequest, opts ...grpc.CallOption) (*ListBookedResponse, error) {
	out := new(ListBookedResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingCustomer/HistoryBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingCustomerClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/booking.BookingCustomer/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingCustomerServer is the server API for BookingCustomer service.
// All implementations must embed UnimplementedBookingCustomerServer
// for forward compatibility
type BookingCustomerServer interface {
	CreateCustomer(context.Context, *Customer) (*Customer, error)
	UpdateCustomer(context.Context, *Customer) (*Customer, error)
	FindCustomer(context.Context, *FindCustomerRequest) (*Customer, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*Empty, error)
	ListCustomer(context.Context, *ListCustomerRequest) (*ListCustomerResponse, error)
	HistoryBooking(context.Context, *HistoryBookingRequest) (*ListBookedResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*Customer, error)
	mustEmbedUnimplementedBookingCustomerServer()
}

// UnimplementedBookingCustomerServer must be embedded to have forward compatible implementations.
type UnimplementedBookingCustomerServer struct {
}

func (UnimplementedBookingCustomerServer) CreateCustomer(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedBookingCustomerServer) UpdateCustomer(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedBookingCustomerServer) FindCustomer(context.Context, *FindCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCustomer not implemented")
}
func (UnimplementedBookingCustomerServer) DeleteCustomer(context.Context, *DeleteCustomerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedBookingCustomerServer) ListCustomer(context.Context, *ListCustomerRequest) (*ListCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomer not implemented")
}
func (UnimplementedBookingCustomerServer) HistoryBooking(context.Context, *HistoryBookingRequest) (*ListBookedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryBooking not implemented")
}
func (UnimplementedBookingCustomerServer) ChangePassword(context.Context, *ChangePasswordRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedBookingCustomerServer) mustEmbedUnimplementedBookingCustomerServer() {}

// UnsafeBookingCustomerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingCustomerServer will
// result in compilation errors.
type UnsafeBookingCustomerServer interface {
	mustEmbedUnimplementedBookingCustomerServer()
}

func RegisterBookingCustomerServer(s grpc.ServiceRegistrar, srv BookingCustomerServer) {
	s.RegisterService(&BookingCustomer_ServiceDesc, srv)
}

func _BookingCustomer_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingCustomerServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingCustomer/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingCustomerServer).CreateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingCustomer_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingCustomerServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingCustomer/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingCustomerServer).UpdateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingCustomer_FindCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingCustomerServer).FindCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingCustomer/FindCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingCustomerServer).FindCustomer(ctx, req.(*FindCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingCustomer_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingCustomerServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingCustomer/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingCustomerServer).DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingCustomer_ListCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingCustomerServer).ListCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingCustomer/ListCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingCustomerServer).ListCustomer(ctx, req.(*ListCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingCustomer_HistoryBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingCustomerServer).HistoryBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingCustomer/HistoryBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingCustomerServer).HistoryBooking(ctx, req.(*HistoryBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingCustomer_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingCustomerServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingCustomer/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingCustomerServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingCustomer_ServiceDesc is the grpc.ServiceDesc for BookingCustomer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingCustomer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.BookingCustomer",
	HandlerType: (*BookingCustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _BookingCustomer_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _BookingCustomer_UpdateCustomer_Handler,
		},
		{
			MethodName: "FindCustomer",
			Handler:    _BookingCustomer_FindCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _BookingCustomer_DeleteCustomer_Handler,
		},
		{
			MethodName: "ListCustomer",
			Handler:    _BookingCustomer_ListCustomer_Handler,
		},
		{
			MethodName: "HistoryBooking",
			Handler:    _BookingCustomer_HistoryBooking_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _BookingCustomer_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}
